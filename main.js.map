{"version":3,"file":"main.js","mappings":"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","sources":["webpack://quiz-beauty-test-task/./src/utile/control.ts","webpack://quiz-beauty-test-task/./src/app/components/header/header.ts","webpack://quiz-beauty-test-task/./src/app/components/footer/footer.ts","webpack://quiz-beauty-test-task/./src/types/quiz-types.ts","webpack://quiz-beauty-test-task/./src/app/pages/quiz/round/buttons/buttons.ts","webpack://quiz-beauty-test-task/./src/app/pages/quiz/round/round.ts","webpack://quiz-beauty-test-task/./src/app/pages/quiz/quiz.ts","webpack://quiz-beauty-test-task/./src/app/pages/quiz/quiz.const.ts","webpack://quiz-beauty-test-task/./src/app/pages/result/item-card/item-card.ts","webpack://quiz-beauty-test-task/./src/app/pages/result/result.ts","webpack://quiz-beauty-test-task/./src/app/app.ts","webpack://quiz-beauty-test-task/./src/data/quiz.data.ts","webpack://quiz-beauty-test-task/./src/index.ts","webpack://quiz-beauty-test-task/./src/controller/quiz-controller..ts"],"sourcesContent":["\r\ntype atrType = {\r\n    name: string,\r\n    value: string,\r\n}\r\n\r\nexport class Control {\r\n    public node;\r\n\r\n    constructor(parentNode: HTMLElement | null, tagName: string, className: string | string[], content: string = '', atr?: atrType[]) {\r\n        const element = document.createElement(tagName);\r\n        \r\n        if (Array.isArray(className)) {\r\n            className.forEach(name => element.classList.add(name));\r\n        }\r\n        if (typeof className === 'string') {\r\n            element.className = className;\r\n        }\r\n\r\n        element.textContent = content;\r\n        \r\n        if (parentNode) {\r\n            parentNode.append(element);\r\n        }\r\n\r\n        if (atr) {\r\n            atr.forEach(el => element.setAttribute(el.name, el.value));\r\n        }\r\n\r\n        this.node = element;\r\n    }\r\n\r\n    destroy() {\r\n        this.node.remove();\r\n    }\r\n}","import { Control } from \"../../../utile/control\";\r\n\r\nexport class Header extends Control {\r\n    private wrap: Control;\r\n    private title: Control;\r\n    private author: Control;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'header', 'header');\r\n        this.wrap = new Control(this.node, 'div', 'header__wrap');\r\n        this.title = new Control(this.wrap.node, 'h1', 'header__wrap__title', 'Beauty Quiz');\r\n        this.author = new Control(this.wrap.node, 'h2', 'header__wrap__author', 'Мария Ващаева');\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n    }\r\n}","import { Control } from \"../../../utile/control\";\r\n\r\ntype LinkType = {\r\n    name: string,\r\n    url: string,\r\n    icon: string,\r\n}\r\n\r\nexport class Footer extends Control {\r\n    private wrap: Control;\r\n    private copyWrite: Control;\r\n    private myLinks: Control;\r\n    private linkItem: Control;\r\n    private linkItems: LinkType[] = [\r\n        {\r\n            name: 'gitHub',\r\n            url: 'https://github.com/MaryAnzh',\r\n            icon: ''\r\n        },\r\n        {\r\n            name: 'linkedin',\r\n            url: 'https://www.linkedin.com/in/maryia-vashchayeva-511313240/',\r\n            icon: ''\r\n        },\r\n    ]\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'footer', 'footer');\r\n        this.wrap = new Control(this.node, 'div', 'footer__wrap');\r\n        this.copyWrite = new Control(this.wrap.node, 'p', 'footer__wrap__copywrite', '©2023, Minsk');\r\n        this.myLinks = new Control(this.wrap.node, 'ul', 'footer__wrap__links');\r\n        this.linkItems.forEach(({ name, url, icon }) => {\r\n            const link = new Control(this.myLinks.node, 'li', 'footer__wrap__links__item');\r\n            const a = new Control(link.node,\r\n                'a',\r\n                'footer__wrap__links__item__link',\r\n                name,\r\n                [{ name: 'href', value: url },\r\n                { name: 'target', value: '_blank' },\r\n                { name: 'rel', value: 'noreferrer' }]);\r\n        });\r\n\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n    }\r\n}","export enum controlButtons {\r\n    Next = 'next',\r\n    Prev = 'prev',\r\n}\r\n\r\nexport type RoundResultType = {\r\n    direction?: controlButtons,\r\n    questionNum?: number,\r\n    checkedQuestion: number,\r\n    currentRound: number\r\n}","import { Control } from '../../../../../utile/control';\r\nimport { controlButtons } from '../../../../../types/quiz-types';\r\n\r\nenum ButtonEnum {\r\n    Next = 'Дальше',\r\n    Prev = 'Назад',\r\n    Result = 'Узнать результат',\r\n};\r\n\r\nenum PrevButtonClass {\r\n    Fist = 'quiz-buttons__prev-first',\r\n    Base = 'quiz-buttons__prev',\r\n};\r\n\r\nexport class QuizButtons extends Control {\r\n    prev: Control;\r\n    next: Control;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'div', 'quiz-buttons');\r\n        this.prev = new Control(this.node, 'button', PrevButtonClass.Fist, ButtonEnum.Prev, [{ name: 'id', value: controlButtons.Prev }]);\r\n        this.next = new Control(this.node, 'button', 'quiz-buttons__next', ButtonEnum.Next, [{ name: 'id', value: controlButtons.Next }]);\r\n    }\r\n\r\n    changeButtonsView = (roundNumber: number, questionCount: number) => {\r\n        if (roundNumber === 0) {\r\n            this.firstButtonsPos();\r\n            return;\r\n        }\r\n        if (roundNumber === (questionCount - 1)) {\r\n            this.lastButtonsPos();\r\n            return;\r\n        }\r\n        this.middleButtonsPos();\r\n    }\r\n\r\n    firstButtonsPos = () => {\r\n        this.prev.node.className = PrevButtonClass.Fist;\r\n        this.next.node.textContent = ButtonEnum.Next;\r\n    }\r\n\r\n    middleButtonsPos = () => {\r\n        this.prev.node.className = PrevButtonClass.Base;\r\n        this.next.node.textContent = ButtonEnum.Next;\r\n\r\n    }\r\n\r\n    lastButtonsPos = () => {\r\n        this.prev.node.className = PrevButtonClass.Base;\r\n        this.next.node.textContent = ButtonEnum.Result;\r\n\r\n    }\r\n\r\n    destroy(): void {\r\n        this.node.onclick = null;\r\n        super.destroy();\r\n\r\n    }\r\n}","import { Control } from '../../../../utile/control'\r\nimport { IRound } from '../../../../data/quiz.data';\r\nimport { QuizButtons } from './buttons/buttons';\r\nimport { controlButtons, RoundResultType } from '../../../../types/quiz-types';\r\n\r\n\r\nexport class Round extends Control {\r\n    infWrap: Control;\r\n    sliderCheckboxes: Control;\r\n    checkboxesSet: HTMLInputElement[] = [];\r\n    questionNumText: Control;\r\n    question: Control;\r\n    answerList: Control;\r\n    answerListSet: HTMLInputElement[] = [];\r\n    buttonsBlock: QuizButtons;\r\n    prevButton: Control;\r\n    nextButton: Control;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'div', 'round');\r\n\r\n        //block1\r\n        this.infWrap = new Control(this.node, 'div', 'round__info');\r\n        this.sliderCheckboxes = new Control(this.infWrap.node, 'div', 'round__info__slider-checkboxes');\r\n        this.questionNumText = new Control(this.infWrap.node, 'p', 'round__info__question-num-text');\r\n        this.question = new Control(this.infWrap.node, 'p', 'round__info__question');\r\n        this.answerList = new Control(this.infWrap.node, 'ul', 'round__info__answer-list');\r\n\r\n        //block2\r\n        this.buttonsBlock = new QuizButtons(this.node);\r\n    }\r\n\r\n    addRoundData = (roundData: IRound, questionCount: number, questionIndex: number, selectedAnswer: number): Promise<RoundResultType> => {\r\n        this.cleanRoundInfo(questionCount, questionIndex);\r\n        this.addRoundInfo(roundData, questionCount, questionIndex, selectedAnswer);\r\n\r\n        return new Promise((res) => {\r\n            this.buttonsBlock.node.onclick = (e) => {\r\n                const checkedElem = this.answerListSet.findIndex(el => el.checked === true);\r\n                const el = <HTMLElement>e.target;\r\n                let direction = '';\r\n                if (el.id !== controlButtons.Next && el.id !== controlButtons.Prev) {\r\n                    direction = controlButtons.Next;\r\n                    console.log('Неверный id');\r\n                    return;\r\n                }\r\n\r\n                const round: controlButtons = el.id === controlButtons.Prev ? controlButtons.Prev : controlButtons.Next;;\r\n                const result: RoundResultType = {\r\n                    direction: round,\r\n                    checkedQuestion: checkedElem,\r\n                    currentRound: questionIndex,\r\n                }\r\n\r\n                res(result);\r\n            }\r\n\r\n            this.checkboxesSet.forEach((input, i) => {\r\n                input.onchange = () => {\r\n                    const checkedElem = this.answerListSet.findIndex(el => el.checked === true);\r\n                    const result: RoundResultType = {\r\n                        questionNum: i,\r\n                        checkedQuestion: checkedElem,\r\n                        currentRound: questionIndex\r\n                    }\r\n                    res(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    addRoundInfo = (roundData: IRound, questionCount: number, questionIndex: number, selectedAnswer: number) => {\r\n        const questionNum = questionIndex + 1;\r\n\r\n        this.addQuestionNumberText(questionNum, questionCount);\r\n        this.question.node.textContent = roundData.question;\r\n        this.createAnswerList(roundData.answers, selectedAnswer);\r\n        this.buttonsBlock.changeButtonsView(questionIndex, questionCount);\r\n    }\r\n\r\n    createCheckBox = (quantity: number) => {\r\n        [...Array(quantity).keys()].forEach(el => {\r\n            const box = new Control(this.sliderCheckboxes.node, 'div', 'round__info__slider-checkboxes__box');\r\n            const input = new Control(box.node, 'input', 'round__info__slider-checkboxes__box__input', null,\r\n                [\r\n                    { name: 'name', value: 'box' },\r\n                    { name: 'type', value: 'radio' },\r\n                    { name: 'id', value: `box-${el}` }\r\n                ])\r\n            const label = new Control(box.node, 'label', 'round__info__slider-checkboxes__box__label', null, [{ name: 'for', value: `box-${el}` }]);\r\n            const i = <HTMLInputElement>input.node;\r\n            this.checkboxesSet.push(i);\r\n        });\r\n        this.checkboxesSet[0].checked = true;\r\n    }\r\n\r\n    checkedSliderInput = (number: number) => {\r\n        this.checkboxesSet[number].checked = true;\r\n    }\r\n\r\n    addQuestionNumberText = (questionNum: number, questionCount: number) => {\r\n        this.questionNumText.node.textContent = `Вопрос ${questionNum} из ${questionCount}`;\r\n    }\r\n\r\n    createAnswerList = (answers: string[], checkedInput: number) => {\r\n        this.answerList.node.innerHTML = '';\r\n\r\n        [...Array(answers.length).keys()].forEach((index) => {\r\n\r\n            const answer = new Control(this.answerList.node, 'li', 'round__info__answer-list__answer');\r\n            const inputId = `answer_${index}`;\r\n            const input = new Control(answer.node, 'input', 'round__info__answer-list__answer__input', null,\r\n                [\r\n                    { name: 'name', value: 'answer' },\r\n                    { name: 'type', value: 'radio' },\r\n                    { name: 'id', value: inputId },\r\n                ])\r\n\r\n            const label = new Control(answer.node, 'label', 'round__info__answer-list__answer__label', answers[index],\r\n                [{ name: 'for', value: inputId }]\r\n            );\r\n            const item = <HTMLInputElement>input.node;\r\n            if (checkedInput > -1 && index === checkedInput) {\r\n                item.checked = true;\r\n            }\r\n            this.answerListSet.push(item);\r\n        });\r\n    }\r\n\r\n    cleanRoundInfo = (questionCount: number, questionIndex: number) => {\r\n        if (this.checkboxesSet.length === 0) {\r\n            this.createCheckBox(questionCount);\r\n        } else {\r\n            this.checkedSliderInput(questionIndex);\r\n        }\r\n        this.answerListSet = [];\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n        this.buttonsBlock.destroy();\r\n        this.checkboxesSet = [];\r\n        this.answerListSet = [];\r\n        this.answerListSet.forEach((input) => input.checked = null);\r\n    }\r\n}","import { IRound, quizData } from '../../../data/quiz.data';\r\nimport { Control } from '../../../utile/control';\r\nimport { quizConst } from './quiz.const';\r\nimport { Round } from './round/round';\r\nimport { RoundResultType } from '../../../types/quiz-types';\r\n\r\nexport class Quiz extends Control {\r\n    private title: Control;\r\n    private description: Control;\r\n    public round: Round;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'section', 'quiz');\r\n        this.title = new Control(this.node, 'h2', 'quiz__title', quizConst.title);\r\n        this.description = new Control(this.node, 'p', 'quiz__description', quizConst.description);\r\n        this.round = new Round(this.node);\r\n    }\r\n\r\n    addRoundData = async (roundInfo: IRound, questionCount: number, questionNum: number, checkedQuestion: number) => {\r\n        const result: RoundResultType = await this.round.addRoundData(roundInfo, questionCount, questionNum, checkedQuestion);\r\n        return result;\r\n    }\r\n\r\n    destroy(): void {\r\n        this.round.destroy();\r\n        super.destroy();\r\n    }\r\n}\r\n","export const quizConst = {\r\n    title: 'Онлайн-подбор средств для лица',\r\n    description: 'Пройдите короткий тест и получите список наиболее подходящих для вас косметических продуктов'\r\n}","import { Control } from '../../../../utile/control';\r\nimport { IProduct } from '../../../../types/result-types';\r\n\r\nexport class ItemCard extends Control {\r\n    image: Control;\r\n    title: Control;\r\n    priceBlock: Control;\r\n    currentPrice: Control;\r\n    oldPrice: Control | null = null;\r\n    iconWrap: Control;\r\n    isItemSelect = false;\r\n\r\n    constructor(parent: HTMLElement, product: IProduct) {\r\n        super(parent, 'div', 'item-card');\r\n        this.image = new Control(this.node, 'img', 'item-card__img', null, [\r\n            { name: 'alt', value: product.title },\r\n            { name: 'src', value: product.image }]\r\n        );\r\n        this.title = new Control(this.node, 'h4', 'item-card__title', product.title);\r\n        this.priceBlock = new Control(this.node, 'p', 'item-card__prices-block');\r\n        if (product.oldPrice) {\r\n            const text = product.oldPrice;\r\n            this.oldPrice = new Control(this.priceBlock.node, 'span', 'item-card__prices-block__old', text.toString());\r\n        }\r\n        this.currentPrice = new Control(this.priceBlock.node, 'span', 'item-card__prices-block__current', `${product.price.toString()}руб.`);\r\n        this.iconWrap = new Control(this.node, 'div', 'item-card__icon');\r\n\r\n        this.iconWrap.node.innerHTML = `\r\n        <svg  class=\"heart-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n           x=\"0px\" y=\"0px\" viewBox=\"0 0 32 32\" xml:space=\"preserve\">\r\n           <path d=\"M27.8,6.1\r\n            c-0.7-0.7-1.5-1.2-2.4-1.6C24.5,4.2,23.6,4,22.6,4c-1,0-1.9,0.2-2.8,0.6c-0.9,0.4-1.7,0.9-2.4,1.6L16,7.6l-1.4-1.4\r\n            C13.2,4.8,11.3,4,9.4,4C7.5,4,5.6,4.8,4.2,6.1s-2.1,3.2-2.1,5.2c0,1.9,0.8,3.8,2.1,5.2l1.4,1.4L16,28.3l10.4-10.4l1.4-1.4\r\n            c0.7-0.7,1.2-1.5,1.6-2.4c0.4-0.9,0.6-1.8,0.6-2.8s-0.2-1.9-0.6-2.8C29,7.6,28.5,6.8,27.8,6.1z\"/>\r\n        </svg>`\r\n        this.iconWrap.node.onclick = (e) => this.selectItem(e);\r\n    }\r\n\r\n    selectItem = (e: Event) => {\r\n        this.isItemSelect = !this.isItemSelect;\r\n        const elem = <HTMLElement>e.target;\r\n        const svg = <SVGAElement>elem.children[0];\r\n\r\n        if (this.isItemSelect) {\r\n            svg.style.fill = '#4885A6';\r\n            return;\r\n        }\r\n        svg.style.fill = 'none';\r\n    }\r\n}","import { IProduct, IQuizResult } from '../../../types/result-types';\r\nimport { Control } from '../../../utile/control';\r\n\r\nimport { ItemCard } from './item-card/item-card';\r\n\r\n\r\nconst resultText = {\r\n    title: 'Результат',\r\n    info: 'Мы подобрали для вас наиболее подходящие средства',\r\n    noAnswer: 'Ответ не выбран'\r\n}\r\n\r\nexport class Result extends Control {\r\n    title: Control;\r\n    resultList: Control;\r\n    info: Control;\r\n    cardsWrap: Control;\r\n\r\n    constructor(parent: HTMLElement, results: IQuizResult[], products: IProduct[]) {\r\n        super(parent, 'div', 'result');\r\n\r\n        this.title = new Control(this.node, 'h2', 'result__title', resultText.title);\r\n        this.resultList = new Control(this.node, 'ul', 'result__list');\r\n        this.info = new Control(this.node, 'p', 'result__info', resultText.info);\r\n\r\n        results.map(({ question, answer }) => {\r\n            const li = new Control(this.resultList.node, 'li', 'result__list__item');\r\n            li.node.innerHTML = `<span>${question}</span> : ${answer ? answer : resultText.noAnswer}`;\r\n        });\r\n        this.cardsWrap = new Control(this.node, 'div', 'result__cards-wrap');\r\n        products.forEach((product) => {\r\n            const card = new ItemCard(this.cardsWrap.node, product);\r\n        });\r\n\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n    }\r\n}","import { Control } from '../utile/control';\r\nimport { IRound } from '../data/quiz.data';\r\nimport { IProduct, IQuizResult } from '../types/result-types';\r\n\r\nimport { Header } from './components/header/header';\r\nimport { Footer } from './components/footer/footer';\r\nimport { Quiz } from './pages/quiz/quiz';\r\nimport { Result } from './pages/result/result';\r\n\r\nexport class App extends Control {\r\n    private header: Header;\r\n    private main: Control;\r\n    private footer: Footer;\r\n    private quiz: Quiz;\r\n    private result: Result | null = null;\r\n\r\n    constructor(parent: HTMLElement) {\r\n        super(parent, 'div', 'wrapper');\r\n        this.header = new Header(this.node);\r\n        this.main = new Control(this.node, 'main', 'main');\r\n        this.footer = new Footer(this.node);\r\n        this.quiz = new Quiz(this.main.node);\r\n    }\r\n\r\n    addRoundData = (roundInfo: IRound, questionCount: number, questionNum: number, checkedQuestion: number) => {\r\n        return this.quiz.addRoundData(roundInfo, questionCount, questionNum, checkedQuestion);\r\n    }\r\n\r\n    showResult = (results: IQuizResult[], products: IProduct[]) => {\r\n        this.quiz.destroy();\r\n        this.result = new Result(this.main.node, results, products);\r\n    }\r\n\r\n    destroy(): void {\r\n        super.destroy();\r\n    }\r\n}","export interface IRound {\r\n    question: string,\r\n    answers: string[]\r\n}\r\n\r\nexport const quizData: IRound[] = [\r\n    {\r\n        question: 'Сколько вам лет?',\r\n        answers: [\r\n            'Нужны средства для ребёнка младше 10 лет',\r\n            'Мне меньше 25 лет',\r\n            'От 25 до 35 лет',\r\n            'От 35 до 45 лет',\r\n            'Мне больше 45 лет'\r\n        ],\r\n    },\r\n    {\r\n        question: 'Какой у вас тип кожи?',\r\n        answers: [\r\n            'Сухая',\r\n            'Нормальная',\r\n            'Комбинированная',\r\n            'Жирная'\r\n        ],\r\n    },\r\n    {\r\n        question: 'Беспокоят ли воспаления на лице?',\r\n        answers: [\r\n            'Да',\r\n            'Нет',\r\n            'Иногда',\r\n        ],\r\n    },\r\n]","import './assets/style/style.scss';\r\nimport { QuizController } from './controller/quiz-controller.';\r\nimport { quizData } from './data/quiz.data';\r\n\r\nconst controller = new QuizController(quizData);\r\n\r\nwindow.addEventListener('load', () => controller.showApp());","import { App } from '../app/app';\r\nimport { IRound } from '../data/quiz.data';\r\nimport { RoundResultType, controlButtons } from '../types/quiz-types';\r\nimport { IQuizResult, IProduct } from '../types/result-types';\r\n\r\nexport class QuizController {\r\n    data: IRound[];\r\n    answersSet: number[];\r\n    app: App | null = null;\r\n    currentRound = 0;\r\n\r\n    constructor(data: IRound[]) {\r\n        this.data = data;\r\n        this.answersSet = this.createAnswersSet();\r\n    }\r\n\r\n    showApp = async () => {\r\n        const body = <HTMLElement>document.querySelector('body');\r\n        if (!this.app) {\r\n            this.app = new App(body);\r\n        }\r\n\r\n        const quiz = async () => {\r\n\r\n            const result: RoundResultType = await this.app.addRoundData(\r\n                this.data[this.currentRound],\r\n                this.data.length,\r\n                this.currentRound,\r\n                this.answersSet[this.currentRound]);\r\n\r\n            if (result.checkedQuestion > -1) {\r\n                this.answersSet[result.currentRound] = result.checkedQuestion;\r\n            }\r\n\r\n            if (this.currentRound === this.data.length - 1 && result.direction === controlButtons.Next) {\r\n                await this.showQuizResult();\r\n                return;\r\n            }\r\n\r\n            if (result.direction === controlButtons.Next) {\r\n                this.currentRound += 1;\r\n                await quiz();\r\n                return;\r\n            }\r\n\r\n            if (result.direction === controlButtons.Prev) {\r\n                this.currentRound -= 1;\r\n                await quiz();\r\n                return;\r\n            }\r\n\r\n            //0 falsy, а он может прилететь и должен быть валиден, потому провирка такого вида\r\n            // а не if(result.questionNum) {}\r\n            if (typeof result.questionNum === 'number') {\r\n                this.currentRound = result.questionNum;\r\n                await quiz();\r\n                return;\r\n            }\r\n        }\r\n        await quiz();\r\n    }\r\n\r\n    createAnswersSet = () => {\r\n        return this.data.map(el => -1);\r\n    }\r\n\r\n    showQuizResult = async () => {\r\n        const result: IQuizResult[] = this.answersSet.map((answerIndex, index) => {\r\n            const roundResult: IQuizResult = {\r\n                question: this.data[index].question,\r\n                answer: this.data[index].answers[answerIndex]\r\n            }\r\n            return roundResult;\r\n        });\r\n        const products = await this.getProducts();\r\n        this.app.showResult(result, products);\r\n    }\r\n\r\n    getProducts = async () => {\r\n        const response = await fetch('./json/products.json');\r\n        const data: IProduct[] = await response.json();\r\n        return data;\r\n    }\r\n}"],"names":["Control","constructor","parentNode","tagName","className","content","atr","element","document","createElement","Array","isArray","forEach","name","classList","add","textContent","append","el","setAttribute","value","this","node","destroy","remove","Header","parent","super","wrap","title","author","Footer","linkItems","url","icon","copyWrite","myLinks","link","controlButtons","ButtonEnum","PrevButtonClass","QuizButtons","changeButtonsView","roundNumber","questionCount","middleButtonsPos","lastButtonsPos","firstButtonsPos","prev","Fist","next","Next","Base","Result","Prev","onclick","Round","checkboxesSet","answerListSet","addRoundData","roundData","questionIndex","selectedAnswer","cleanRoundInfo","addRoundInfo","Promise","res","buttonsBlock","e","checkedElem","findIndex","checked","target","direction","id","console","log","round","checkedQuestion","currentRound","input","i","onchange","questionNum","addQuestionNumberText","question","createAnswerList","answers","createCheckBox","quantity","keys","box","sliderCheckboxes","push","checkedSliderInput","number","questionNumText","checkedInput","answerList","innerHTML","length","index","answer","inputId","item","infWrap","Quiz","roundInfo","description","ItemCard","product","oldPrice","isItemSelect","selectItem","svg","children","style","fill","image","priceBlock","text","toString","currentPrice","price","iconWrap","results","products","resultList","info","map","cardsWrap","App","result","quiz","showResult","main","header","footer","controller","data","app","showApp","body","querySelector","answersSet","showQuizResult","createAnswersSet","answerIndex","getProducts","response","fetch","json","window","addEventListener"],"sourceRoot":""}